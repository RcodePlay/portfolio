<script>
  // Extend the Window interface to include show, hide, and hideAll
  declare global {
    interface Window {
      show: (id: string) => void;
      hide: (id: string) => void;
      hideAll: () => void;
    }
  }

  function show(id: string) {
    const overlay = document.getElementById("overlay");
    const popup = document.getElementById(id);
    if (overlay) overlay.classList.add("active");
    if (popup) popup.classList.add("active");
  }

  function hide(id: string) {
    const popup = document.getElementById(id);
    const overlay = document.getElementById("overlay");
    if (popup) popup.classList.remove("active");
    if (overlay) overlay.classList.remove("active");
  }

  function hideAll() {
    document
      .querySelectorAll(".popup")
      .forEach((p) => p.classList.remove("active"));
    const overlay = document.getElementById("overlay");
    if (overlay) overlay.classList.remove("active");
  }

  // Expose functions globally for inline event handlers
  window.show = show;
  window.hide = hide;
  window.hideAll = hideAll;
</script>

<div class="popup" id="popup1">
  <section id="heading">
    <h2>Slovakian Skywalker.md</h2>
    <a href="#" onclick="hide('popup1')">&#10006</a>
  </section>
  <section id="popup-text">
    <p>
      A personal CubeSat project, more info in the GitHub repo (it's private for
      now, though).
    </p>
  </section>
</div>

<div class="popup" id="popup2">
  <section id="heading">
    <h2>RyanOS.md</h2>
    <a href="#" onclick="hide('popup2')">&#10006</a>
  </section>
  <section id="popup-text">
    <p>
      My own OS, not fully from scratch, it's made with an existing bootloader
      and kernel, but the rest is me.
    </p>
  </section>
</div>

<div class="popup" id="popup3">
  <section id="heading">
    <h2>GENESIS.md</h2>
    <a href="#" onclick="hide('popup3')">&#10006</a>
  </section>
  <section id="popup-text">
    <p>
      GENESIS is an autonomous, adaptive, and self-healing AI framework capable
      of dynamically scaling across heterogeneous hardware, self-generating
      functional code, and reconstructing itself after partial system failure.
      It acts as a persistent intelligence capable of operating anywhere from
      massive server clusters to single embedded devices, maintaining identity,
      functionality, and adaptability throughout.
    </p>
  </section>
</div>

<div class="popup" id="popup4">
  <section id="heading">
    <h2>Cipherlink.md</h2>
    <a href="#" onclick="hide('popup4')">&#10006</a>
  </section>
  <section id="popup-text">
    <p>
      Yet another private communication project by me. This one utilizes the
      existing infrastructure of internet and cell towers, limiting range to
      cell tower coverage. How this worsk: you take a Cipherlink module that
      uses NFC and USB for communication with your phone or computer, it also
      has a secure element onboard (the ATECC608A) used for
      encryption/decryption & key storage. When you write a message, you tap
      your module to your phone to encrypt the message, which is then sent to an
      API server that holds the encrypted messages along with recepient userIDs.
      The next time the recepient opens the Cipherlink app on their phone, it
      will fetch the incoming messages from the API server, prompting the user
      to tap their module to decrypt. Once read, the message gets destroyed and
      removed from the API server's database. The point is, the decrypted
      message never touches the internet. It only stays on your device as long
      as you want it to.
    </p>
  </section>
</div>
